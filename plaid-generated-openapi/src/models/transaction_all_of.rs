/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.343.0
 *
 * Generated by: https://openapi-generator.tech
 */

#[derive(
    Clone, Debug, PartialEq, Default, Serialize, Deserialize, bincode::Encode, bincode::Decode,
)]
pub struct TransactionAllOf {
    /// The date that the transaction was authorized. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format ( `YYYY-MM-DD` ).
    #[serde(rename = "authorized_date", deserialize_with = "Option::deserialize")]
    pub authorized_date: Option<String>,
    /// Date and time when a transaction was authorized in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format ( `YYYY-MM-DDTHH:mm:ssZ` ).  This field is returned for select financial institutions and comes as provided by the institution. It may contain default time values (such as 00:00:00). This field is only populated in API version 2019-05-29 and later.
    #[serde(
        rename = "authorized_datetime",
        deserialize_with = "Option::deserialize"
    )]
    pub authorized_datetime: Option<String>,
    /// Date and time when a transaction was posted in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format ( `YYYY-MM-DDTHH:mm:ssZ` ).  This field is returned for select financial institutions and comes as provided by the institution. It may contain default time values (such as 00:00:00). This field is only populated in API version 2019-05-29 and later.
    #[serde(rename = "datetime", deserialize_with = "Option::deserialize")]
    pub datetime: Option<String>,
    /// The channel used to make a payment. `online:` transactions that took place online.  `in store:` transactions that were made at a physical location.  `other:` transactions that relate to banks, e.g. fees or deposits.  This field replaces the `transaction_type` field.
    #[serde(rename = "payment_channel")]
    pub payment_channel: PaymentChannel,
    #[serde(
        rename = "personal_finance_category",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub personal_finance_category: Option<Option<crate::models::PersonalFinanceCategory>>,
    #[serde(rename = "transaction_code", deserialize_with = "Option::deserialize")]
    pub transaction_code: Option<crate::models::TransactionCode>,
    /// A link to the icon associated with the primary personal finance category. The logo will always be 100x100 pixels.
    #[serde(
        rename = "personal_finance_category_icon_url",
        skip_serializing_if = "Option::is_none"
    )]
    pub personal_finance_category_icon_url: Option<String>,
    /// The counterparties present in the transaction. Counterparties, such as the financial institutions, are extracted by Plaid from the raw description.
    #[serde(rename = "counterparties", skip_serializing_if = "Option::is_none")]
    pub counterparties: Option<Vec<crate::models::TransactionCounterparty>>,
}

impl TransactionAllOf {
    pub fn new(
        authorized_date: Option<String>,
        authorized_datetime: Option<String>,
        datetime: Option<String>,
        payment_channel: PaymentChannel,
        transaction_code: Option<crate::models::TransactionCode>,
    ) -> TransactionAllOf {
        TransactionAllOf {
            authorized_date,
            authorized_datetime,
            datetime,
            payment_channel,
            personal_finance_category: None,
            transaction_code,
            personal_finance_category_icon_url: None,
            counterparties: None,
        }
    }
}

/// The channel used to make a payment. `online:` transactions that took place online.  `in store:` transactions that were made at a physical location.  `other:` transactions that relate to banks, e.g. fees or deposits.  This field replaces the `transaction_type` field.
#[derive(
    Clone,
    Copy,
    Debug,
    Eq,
    PartialEq,
    Ord,
    PartialOrd,
    Hash,
    Serialize,
    Deserialize,
    bincode::Encode,
    bincode::Decode,
)]
pub enum PaymentChannel {
    #[serde(rename = "online")]
    Online,
    #[serde(rename = "in store")]
    InStore,
    #[serde(rename = "other")]
    Other,
}

impl Default for PaymentChannel {
    fn default() -> PaymentChannel {
        Self::Online
    }
}
