/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.343.0
 *
 * Generated by: https://openapi-generator.tech
 */

/// UserAddress : Home address for the user.

#[derive(
    Clone, Debug, PartialEq, Default, Serialize, Deserialize, bincode::Encode, bincode::Decode,
)]
pub struct UserAddress {
    /// The primary street portion of an address. If the user has submitted their address, this field will always be filled.
    #[serde(rename = "street")]
    pub street: String,
    /// Extra street information, like an apartment or suite number.
    #[serde(
        rename = "street2",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub street2: Option<Option<String>>,
    /// City from the end user's address
    #[serde(rename = "city")]
    pub city: String,
    /// An ISO 3166-2 subdivision code. Related terms would be \"state\", \"province\", \"prefecture\", \"zone\", \"subdivision\", etc.
    #[serde(rename = "region")]
    pub region: String,
    /// The postal code for the associated address. Between 2 and 10 alphanumeric characters. For US-based addresses this must be 5 numeric digits.
    #[serde(rename = "postal_code")]
    pub postal_code: String,
    /// Valid, capitalized, two-letter ISO code representing the country of this object. Must be in ISO 3166-1 alpha-2 form.
    #[serde(rename = "country")]
    pub country: String,
}

impl UserAddress {
    /// Home address for the user.
    pub fn new(
        street: String,
        city: String,
        region: String,
        postal_code: String,
        country: String,
    ) -> UserAddress {
        UserAddress {
            street,
            street2: None,
            city,
            region,
            postal_code,
            country,
        }
    }
}
