/*
 * The Plaid API
 *
 * The Plaid REST API. Please see https://plaid.com/docs/api for more details.
 *
 * The version of the OpenAPI document: 2020-09-14_1.343.0
 *
 * Generated by: https://openapi-generator.tech
 */

/// Cause : An error object and associated `item_id` used to identify a specific Item and error when a batch operation operating on multiple Items has encountered an error in one of the Items.

#[derive(
    Clone, Debug, PartialEq, Default, Serialize, Deserialize, bincode::Encode, bincode::Decode,
)]
pub struct Cause {
    #[serde(rename = "error_type")]
    pub error_type: crate::models::PlaidErrorType,
    /// The particular error code. Safe for programmatic use.
    #[serde(rename = "error_code")]
    pub error_code: String,
    /// A developer-friendly representation of the error code. This may change over time and is not safe for programmatic use.
    #[serde(rename = "error_message")]
    pub error_message: String,
    /// A user-friendly representation of the error code. `null` if the error is not related to user action.  This may change over time and is not safe for programmatic use.
    #[serde(rename = "display_message", deserialize_with = "Option::deserialize")]
    pub display_message: Option<String>,
    /// A unique ID identifying the request, to be used for troubleshooting purposes. This field will be omitted in errors provided by webhooks.
    #[serde(rename = "request_id", skip_serializing_if = "Option::is_none")]
    pub request_id: Option<String>,
    /// The HTTP status code associated with the error. This will only be returned in the response body when the error information is provided via a webhook.
    #[serde(
        rename = "status",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub status: Option<Option<f32>>,
    /// The URL of a Plaid documentation page with more information about the error
    #[serde(rename = "documentation_url", skip_serializing_if = "Option::is_none")]
    pub documentation_url: Option<String>,
    /// Suggested steps for resolving the error
    #[serde(
        rename = "suggested_action",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub suggested_action: Option<Option<String>>,
    /// The `item_id` of the Item associated with this webhook, warning, or error
    #[serde(rename = "item_id")]
    pub item_id: String,
}

impl Cause {
    /// An error object and associated `item_id` used to identify a specific Item and error when a batch operation operating on multiple Items has encountered an error in one of the Items.
    pub fn new(
        error_type: crate::models::PlaidErrorType,
        error_code: String,
        error_message: String,
        display_message: Option<String>,
        item_id: String,
    ) -> Cause {
        Cause {
            error_type,
            error_code,
            error_message,
            display_message,
            request_id: None,
            status: None,
            documentation_url: None,
            suggested_action: None,
            item_id,
        }
    }
}
